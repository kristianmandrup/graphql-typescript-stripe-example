"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApolloProvider = ApolloProvider;
exports.useApolloClient = useApolloClient;
exports.useApolloQuery = useApolloQuery;
exports.useApolloMutation = useApolloMutation;

var _react = _interopRequireWildcard(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ApolloContext = _react.default.createContext();

function ApolloProvider(_ref) {
  var children = _ref.children,
      client = _ref.client;
  return _react.default.createElement(ApolloContext.Provider, {
    value: client
  }, children);
}

function useApolloClient() {
  return (0, _react.useContext)(ApolloContext);
}

function useApolloQuery(query) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      variables = _ref2.variables;

  var client = useApolloClient();

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      result = _useState2[0],
      setResult = _useState2[1];

  var previousQuery = (0, _react.useRef)();
  var previousVariables = (0, _react.useRef)();
  var observableQuery = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var subscription = observableQuery.current.subscribe(function (nextResult) {
      setResult(nextResult);
    });
    return function () {
      subscription.unsubscribe();
    };
  }, [query, objToKey(variables || {})]);
  var helpers = {
    fetchMore: function fetchMore(opts) {
      return observableQuery.current.fetchMore(opts);
    }
  };

  if (!(query === previousQuery.current && (0, _reactFastCompare.default)(variables, previousVariables.current))) {
    previousQuery.current = query;
    previousVariables.current = variables;
    var watchedQuery = client.watchQuery({
      query: query,
      variables: variables
    });
    observableQuery.current = watchedQuery;
    var currentResult = watchedQuery.currentResult();

    if (currentResult.partial) {
      // throw a promise - use the react suspense to wait until the data is
      // available
      throw watchedQuery.result();
    }

    setResult(currentResult);
    return _objectSpread({}, helpers, currentResult);
  }

  return _objectSpread({}, helpers, result);
}

function useApolloMutation(mutation, baseOptions) {
  var client = useApolloClient();
  return function (localOptions) {
    return client.mutate(_objectSpread({
      mutation: mutation
    }, baseOptions, localOptions));
  };
}

function objToKey(obj) {
  var keys = Object.keys(obj);
  keys.sort();
  var sortedObj = keys.reduce(function (result, key) {
    result[key] = obj[key];
    return result;
  }, {});
  return JSON.stringify(sortedObj);
}